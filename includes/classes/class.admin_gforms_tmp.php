<?php

// TenStreet Admin

class Admin_GForms_TMP extends GForms_TMP {

    /**
     * Network Admin Class
     *
     * Generated by '__construct' method.
     *
     * @var string
     */
    private $network_admin_gforms_tmp;

    function __construct() {

        if (is_network_admin()) {

            $this->network_admin_gforms_tmp = new Network_Admin_GForms_TMP();
        } else {

            // Auth Handler
            add_action('admin_action_settings_authorize_admin_gforms_tmp', array($this, 'settings_authorize_Admin_GForms_TMP'));

            // Single Edit Handler
            add_action('admin_action_settings_update_admin_gforms_tmp', array($this, 'settings_update_Admin_GForms_TMP'));

            // Load Assets
            add_action('admin_menu', array(&$this, 'load_assets_Admin_GForms_TMP'));

            // Add Notices
            add_action('admin_notices', array($this, 'notices_Admin_GForms_TMP'));
        }
    }

    /**
     * Loads Assets.
     * 
     * @return void
     */
    function load_assets_Admin_GForms_TMP() {

        if (is_admin()) {

            //this will run when in the WordPress admin
            if (!is_network_admin()) {

                // $this->page_hook = add_menu_page('TenStreet Settings', 'TenStreet', 'manage_options', 'gforms-tmp', array(&$this, 'display_settings_Admin_GForms_TMP'));
                $this->page_hook = add_submenu_page('edit.php?post_type=tenstreet', 'TenStreet Settings', 'Settings', 'manage_options', 'gforms-tmp', array(&$this, 'display_settings_Admin_GForms_TMP'));
            }

            add_action('admin_print_scripts-' . $this->page_hook, array(&$this, 'load_admin_scripts_GForms_TMP'));
        }
    }

    /**
     * Handle Settings Update.
     * 
     * @return void
     */
    function settings_authorize_Admin_GForms_TMP() {

        check_admin_referer('gforms-tmp-auth-settings');

        $is_multisite = is_multisite();

        $updated = false;

        if (isset($_POST['action'], $_POST['action2'])) {

            if ($_POST['action'] == 'settings_authorize_admin_gforms_tmp') {

                if ($_POST['action2'] == 'authorize') {

                    $updated = true;

                    $gforms_tmp_admin_restapi_url = empty($_POST['gforms_tmp_admin_restapi_url']) ? false : esc_url($_POST['gforms_tmp_admin_restapi_url']);

                    $gforms_tmp_admin_api_password = isset($_POST['gforms_tmp_admin_api_password']) ? $_POST['gforms_tmp_admin_api_password'] : false;

                    $gforms_tmp_admin_api_username = isset($_POST['gforms_tmp_admin_api_username']) ? $_POST['gforms_tmp_admin_api_username'] : false;

                    if ($is_multisite) {

                        update_site_option('gforms_tmp_admin_api_password', $gforms_tmp_admin_api_password);

                        update_site_option('gforms_tmp_admin_api_username', $gforms_tmp_admin_api_username);

                        update_site_option('gforms_tmp_admin_restapi_url', $gforms_tmp_admin_restapi_url);
                    } else {

                        update_option('gforms_tmp_admin_api_password', $gforms_tmp_admin_api_password);

                        update_option('gforms_tmp_admin_api_username', $gforms_tmp_admin_api_username);

                        update_option('gforms_tmp_admin_restapi_url', $gforms_tmp_admin_restapi_url);
                    }

                    if (!$gforms_tmp_admin_restapi_url || !$gforms_tmp_admin_api_username || !$gforms_tmp_admin_api_password) {

                        update_option('gforms_tmp_active', 0);
                    } else {
                        try {
                            if ($this->is_valid_url($gforms_tmp_admin_restapi_url)) {
                                $oauth_provider = new Admin_GForms_TMP_OAuth($gforms_tmp_admin_restapi_url, $gforms_tmp_admin_api_username, $gforms_tmp_admin_api_password);
                                $accessToken = $oauth_provider->get_client_credentials_grant();

                                if (!$this->is_api_authorized_GForms_TMP(false)) {
                                    update_option('gforms_tmp_active', 0);
                                }
                            } else {
                                update_option('gforms_tmp_active', 0);
                            }
                        } catch (\Exception $e) {
                            update_option('gforms_tmp_active', 0);
                        }
                    }
                }

                if ($_POST['action2'] == 'deauthorize') {

                    $updated = true;

                    update_option('gforms_tmp_active', 0);

                    if ($is_multisite) {

                        delete_site_option('gforms_tmp_admin_api_password');

                        delete_site_option('gforms_tmp_admin_api_username');

                        delete_site_option('gforms_tmp_admin_restapi_url');

                        delete_site_option('gforms_tmp_access_token');
                    } else {

                        delete_option('gforms_tmp_admin_api_password');

                        delete_option('gforms_tmp_admin_api_username');

                        delete_option('gforms_tmp_admin_restapi_url');

                        delete_option('gforms_tmp_access_token');
                    }
                }
            }
        }

        wp_redirect(add_query_arg(array('update' => $updated ? 'updated' : 'failed'), admin_url('admin.php?page=gforms-tmp')));

        exit;
    }

    /**
     * Handle Settings Update.
     * 
     * @return void
     */
    function settings_update_Admin_GForms_TMP() {

        check_admin_referer('gforms-tmp-edit-settings');

        $gforms_tmp_admin_client_id = isset($_POST['gforms_tmp_admin_client_id']) ? sanitize_text_field($_POST['gforms_tmp_admin_client_id']) : false;

        $gforms_tmp_active = isset($_POST['gforms_tmp_active']) ? 1 : 0;

        $gforms_tmp_admin_client_name = empty($_POST['gforms_tmp_admin_client_name']) ? false : wp_unslash($_POST['gforms_tmp_admin_client_name']);

        $gforms_tmp_admin_forms = isset($_POST['gforms_tmp_admin_forms']) ? array_filter($_POST['gforms_tmp_admin_forms']) : false;

        update_option('gforms_tmp_admin_client_id', $gforms_tmp_admin_client_id);

        update_option('gforms_tmp_active', $gforms_tmp_active);

        update_option('gforms_tmp_last_update', time());

        update_option('gforms_tmp_admin_client_name', $gforms_tmp_admin_client_name);

        update_option('gforms_tmp_admin_forms', $gforms_tmp_admin_forms);

        wp_redirect(add_query_arg(array('update' => 'updated'), admin_url('admin.php?page=gforms-tmp')));

        exit;
    }

    /**
     * Registers the Blog Admin Page.
     * 
     * @return void
     */
    function display_settings_Admin_GForms_TMP() {

        $unauthorized = false;

        if (!current_user_can('manage_options'))
            $unauthorized = __('You do not have sufficient permissions to edit these settings.');

        if ($unauthorized) {

            echo "<p>{$unauthorized}</p>\n";

            return;
        }

        $is_multisite = is_multisite();

        $is_token_authorized = $this->is_api_authorized_GForms_TMP(true);

        $gforms_tmp_admin_restapi_url = $is_multisite ? get_site_option('gforms_tmp_admin_restapi_url', false) : get_option('gforms_tmp_admin_restapi_url', false);

        $gforms_tmp_admin_api_password = $is_multisite ? get_site_option('gforms_tmp_admin_api_password', false) : get_option('gforms_tmp_admin_api_password', false);

        $gforms_tmp_admin_api_username = $is_multisite ? get_site_option('gforms_tmp_admin_api_username', false) : get_option('gforms_tmp_admin_api_username', false);

        $gforms_tmp_admin_client_name = get_option('gforms_tmp_admin_client_name', false);

        $gforms_tmp_admin_client_id = get_option('gforms_tmp_admin_client_id', false);

        $gforms_tmp_active = get_option('gforms_tmp_active', false);

        $gforms_tmp_last_update = get_option('gforms_tmp_last_update', false);

        $gforms_tmp_admin_forms = get_option('gforms_tmp_admin_forms', array());

        $gforms = GFAPI::get_forms();

        $date = 'Y/m/d g:i:s a';

        if (isset($_GET['update'])) {

            $messages = array();

            if ('updated' == $_GET['update'])
                $messages[1] = __('Settings updated.');
            else
                $messages[0] = __('Settings could not be updated.');
        }

        if (!empty($messages)) {

            foreach ($messages as $status => $msg)
                echo '<div id="message" class="' . ($status ? 'updated' : 'error') . '"><p>' . $msg . '</p></div>';
        }
        ?>



        <h2><?php echo __('TenStreet Admin Authorization', 'gforms-tmp'); ?></h2>

        <br />

        <?php add_thickbox(); ?>

        <?php if (!$is_token_authorized) : ?>          

            <div id="gforms_tmp_auth_settings" style="display:none;">

                <form method="post" id="gforms_tmp_auth_settings_form" action="<?php echo admin_url('admin.php'); ?>">

                    <?php wp_nonce_field('gforms-tmp-auth-settings'); ?>

                    <input type="hidden" name="action" value="settings_authorize_admin_gforms_tmp" />

                    <input type="hidden" name="action2" value="authorize" />

                    <table class="form-table">

                        <tr>

                            <th scope="row"><?php _e('TenStreet Rest API URL') ?></th>

                            <td>

                                <input type="text" name="gforms_tmp_admin_restapi_url" id="gforms_tmp_admin_restapi_url" value="<?php echo esc_attr($gforms_tmp_admin_restapi_url); ?>" class="regular-text" size="33" placeholder="http(s)://" />

                                <p class="description">TenStreet Rest API URL. <br /><?php if ($is_multisite) : ?><strong>Do not change this unless you know what you are doing!</strong><?php endif; ?></p>


                            </td>

                        </tr>

                        <tr>
                            <th scope="row"><?php _e('API Username '); ?></th>

                            <td>

                                <input type="text" name="gforms_tmp_admin_api_username" id="gforms_tmp_admin_api_username" value="<?php echo esc_attr($gforms_tmp_admin_api_username); ?>" class="regular-text" size="33" />

                                <p class="description">Enter Username for API Server.</p>

                            </td>

                        </tr>

                        <tr>
                            <th scope="row"><?php _e('API Password'); ?></th>

                            <td>

                                <input type="password" name="gforms_tmp_admin_api_password" id="gforms_tmp_admin_api_password" value="<?php echo esc_attr($gforms_tmp_admin_api_password); ?>" class="regular-text" size="33" />

                                <p class="description">Enter API Key for REST Server.</p>

                            </td>

                        </tr>

                    </table>

                    <?php submit_button('Authorize'); ?>

                </form>

            </div>

            <h3>You are not authorized to use the API.</h3>

            <p><a href="#TB_inline?width=600&height=550&inlineId=gforms_tmp_auth_settings" class="thickbox button button-primary">Authorize API</a></p>

        <?php else : ?>

            <h3>You have been authorized to use the API.</h3>

            <form method="post" id="gforms_tmp_auth_settings_form" action="<?php echo admin_url('admin.php'); ?>">

                <?php wp_nonce_field('gforms-tmp-auth-settings'); ?>

                <input type="hidden" name="action" value="settings_authorize_admin_gforms_tmp" />

                <input type="hidden" name="action2" value="deauthorize" />

                <p><?php submit_button('Revoke Authorization', 'secondary'); ?></p>

            </form>

        <?php endif; ?>

        <hr />

        <h2><?php echo __('TenStreet Client Settings', 'gforms-tmp'); ?></h2>

        <br />

        <form method="post" action="<?php echo admin_url('admin.php'); ?>">

            <?php wp_nonce_field('gforms-tmp-edit-settings'); ?>

            <input type="hidden" name="action" value="settings_update_admin_gforms_tmp" />

            <input type="hidden" id="is_token_authorized" value="<?php echo $is_token_authorized ? 1 : 0; ?>" />

            <table class="form-table">

                <tr>

                    <th scope="row"><?php _e('TenStreet Client Name') ?></th>

                    <td>

                        <input type="text" name="gforms_tmp_admin_client_name" id="gforms_tmp_admin_client_name" value="<?php echo esc_attr($gforms_tmp_admin_client_name); ?>" class="regular-text" size="33" />

                    </td>

                </tr>

                <tr>

                    <th scope="row"><?php _e('TenStreet Client ID') ?></th>

                    <td><input type="text" name="gforms_tmp_admin_client_id" id="gforms_tmp_admin_client_id" value="<?php echo $gforms_tmp_admin_client_id; ?>" size="4" style="width: 50px;" /></td>

                </tr>

                <tr>
                    <th scope="row"><?php _e('Enable Plugin'); ?></th>

                    <td>

                        <label>
                            <input type="checkbox" name="gforms_tmp_active" id="gforms_tmp_active" value="1" <?php checked((bool) $gforms_tmp_active && $gforms_tmp_admin_client_id, true); ?> <?php disabled((bool) ($gforms_tmp_admin_client_id) && $is_token_authorized, false); ?> title="<?php echo (!$is_token_authorized ? "Plugin disabled until it has been authorized. " : "") . (!$gforms_tmp_admin_client_id ? "Enter Client ID." : ""); ?>" />
                        </label><br/>

                    </td>

                </tr>

                <tr>

                    <th scope="row"><?php _e('Select Active GravityForm(s)') ?></th>

                    <td>

                        <select id="gforms_tmp_admin_forms" name="gforms_tmp_admin_forms[]" multiple="multiple" style="min-width: 200px;">
                            <option value=""><?php esc_html_e('Use all forms', 'gforms-tmp'); ?></option>
                            <?php
                            foreach ($gforms as $gform) {
                                $selected = in_array($gform["id"], $gforms_tmp_admin_forms) ? ' selected="selected" ' : '';
                                ?>
                                <option value="<?php echo absint($gform["id"]) ?>"<?php echo $selected; ?>><?php echo esc_html($gform["title"]) ?></option>
                                <?php
                            }
                            ?>
                        </select>

                    </td>

                </tr>

                <tr>

                    <th scope="row"><?php _e('Last Updated'); ?></th>

                    <td>

                        <label><?php echo (!$gforms_tmp_last_update ) ? __('Never') : mysql2date($date, date('Y-m-d h:i:s', $gforms_tmp_last_update)); ?></label>

                        <input name="gforms_tmp_last_update" type="hidden" id="gforms_tmp_last_update" value="<?php echo $gforms_tmp_last_update ?>" />

                    </td>

                </tr>

            </table>

            <?php submit_button(); ?>

        </form>



        <script type="text/javascript">

            jQuery(document).ready(function ($) {

                $('#gforms_tmp_admin_client_id').on('blur', function (e) {

                    var hints = $.map($('#gforms_tmp_active').prop("title").split("."), $.trim);

                    var idx = hints.indexOf("Enter Client ID");

                    if (!$(this).val()) {

                        $('#gforms_tmp_active').addClass('disabled').attr("disabled", "disabled").removeAttr("checked");

                        if (idx < 0) {
                            hints.push("Enter Client ID");
                        }

                    } else if ("1" == $("#is_token_authorized").val()) {

                        $('#gforms_tmp_active').removeClass('disabled').removeAttr("disabled");

                        if (idx >= 0) {
                            hints.splice(idx, 1);
                        }

                    }

                    $('#gforms_tmp_active').prop("title", hints.join(". "));

                });

            });

        </script>

        <?php
    }

    /**
     * Load Admin Page Scripts
     * 
     * @param mixed $hook
     */
    function load_admin_scripts_GForms_TMP($hook = false) {
        
    }

    /**
     * Add Admin Notices
     * 
     * @return void
     */
    function notices_Admin_GForms_TMP() {
        if ($this->is_plugin_activated(false)) {
            if (!class_exists("GFForms")) {
                $class = "error";
                $message = "TenStreet GravityForms Addon requires Gravity Forms to function.  Please install and activate Gravity Forms.";
                echo"<div class=\"$class\"> <p>$message</p></div>";
            }
        }
    }

}

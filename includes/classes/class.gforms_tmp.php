<?php
class GForms_TMP {
	
	/**
	 * Admin Page Hook
	 *
	 * Generated by 'add_menu_page' function.
	 *
	 * @var string
	 */
	private $page_hook;
	
	/**
	 * Admin Class
	 *
	 * Generated by 'init_GForms_TMP' method.
	 *
	 * @var object
	 */
	private $admin_gforms_tmp;
	
	/**
	 * GravityForm Addon Class
	 *
	 * Generated by 'init_GForms_TMP' method.
	 *
	 * @var object
	 */
	private $addon_gforms_tmp;
	
	/**
	 * TMP Lead Custom Post Type Class
	 *
	 * Generated by 'init_GForms_TMP' method.
	 *
	 * @var object
	 */
	private $post_type;
	
	/**
	 * Oauth Handler Class
	 *
	 * Generated by 'init_GForms_TMP' method.
	 *
	 * @var Admin_GForms_TMP_OAuth
	 */
	protected static $oauth_gforms_tmp;
	
	/**
	 * Oauth EndPoint
	 *
	 * Base Url of Oauth Server.
	 *
	 * @var string
	 */
	protected static $oauth_host;
	
	/**
	 * Oauth Client Id
	 *
	 * Client ID for Google App.
	 *
	 * @var string
	 */
	protected static $oauth_client_id;
	
	/**
	 * Plugin Dir Absolute Path
	 *
	 * @var string
	 */
	protected static $plugin_path;
	
	/**
	 * Plugin File Absolute Path
	 *
	 * @var string
	 */
	protected static $plugin_file;
	
	/**
	 * Debug
	 *
	 * @var array
	 */
	protected static $debug;
	
	/**
	 * Plugin First Run
	 *
	 * @var boolean
	 */
	protected static $first_run;
	const slug = 'gforms-tmp';
	const name = 'GForms_TMP';
	
	/**
	 * Constructor
	 *
	 * @return void
	 */
	function __construct() {
		self::$plugin_path = plugin_dir_path( dirname( dirname( __FILE__ ) ) );
		
		self::$plugin_file = self::$plugin_path . '/gforms_tmp.php';
		
		self::$oauth_host = "http://tmpadmin-tenstreet.com";
		
		self::$oauth_client_id = '935391591904-cdif8sjavjg1gbsl3570i16lsich4lda.apps.googleusercontent.com';
		
		// Hook up to the init action
		add_action( 'init', array (
				&$this,
				'init_GForms_TMP' 
		) );
		
		// Add class instance to Addon Filter
		add_filter( 'gforms_tmp_class_instance', array (
				$this,
				'get_instance' 
		), 10, 1 );
		
		// Handle Auth Code Exchange
		add_action( 'wp_ajax_gforms_tmp_handle_code_exchange', array (
				$this,
				'handle_code_exchange' 
		), 10, 1 );
		// Handle Token Revocation
		add_action( 'wp_ajax_gforms_tmp_handle_token_revocation', array (
				$this,
				'handle_token_revocation' 
		), 10, 1 );
	}
	public function get_instance($class) {
		return $this;
	}
	
	/**
	 * Load the required dependencies for this class.
	 *
	 * Include the following files that make up the plugin:
	 *
	 * - GForms_TMP_EndPoint. EndPoint Handler for API Functionality.
	 * - Admin_GForms_TMP. Admin Page Functionality.
	 * - Network_Admin_GForms_TMP. Network Admin Page Functionality.
	 */
	private function load_dependencies_GForms_TMP() {
		
		/**
		 * The class responsible for defining admin functionality.
		 */
		require_once self::$plugin_path . 'includes/classes/class.admin_gforms_tmp.php';
		/**
		 * The class responsible for defining network admin functionality.
		 */
		require_once self::$plugin_path . 'includes/classes/class.network_admin_gforms_tmp.php';
		/**
		 * The class responsible for defining helper functionality.
		 */
		require_once self::$plugin_path . 'includes/helpers/functions.php';
		/**
		 * The vendor class responsible for defining OAuth2 functionality.
		 */
		require_once self::$plugin_path . 'vendor/autoload.php';
		/**
		 * The class responsible for defining OAuth functionality.
		 */
		require_once self::$plugin_path . 'includes/classes/class.admin_gforms_tmp_oauth.php';
		/**
		 * The class responsible for defining Reporting functionality.
		 */
		require_once self::$plugin_path . 'includes/classes/class.tmp_application_post_type.php';
		
		if ($this->is_plugin_activated( false )) {
			/**
			 * The class responsible for defining GravityForms functionality.
			 */
			require_once self::$plugin_path . 'includes/classes/class.gforms_tmp_addon.php';
		}
	}
	
	/**
	 * Runs when the plugin is initialized
	 *
	 * @return void
	 */
	function init_GForms_TMP() {
		// Load Dependencies
		$this->load_dependencies_GForms_TMP();
		
		// Setup localization
		load_plugin_textdomain( self::slug, false, dirname( plugin_basename( __FILE__ ) ) . '/lang' );
		
		// Setup Custom Post Type
		$first_run = $this->get_first_run();
		$this->post_type = new TMP_Application( $first_run );
		
		self::$oauth_gforms_tmp = new Admin_GForms_TMP_OAuth();
		// Load Assets
		if (is_admin()) {
			
			// Init Admin_GForms_TMP
			$this->admin_gforms_tmp = new Admin_GForms_TMP();
		} else {
			add_action( 'wp_loaded', array (
					&$this,
					'load_assets_GForms_TMP' 
			), 100 );
		}
	}
	
	/**
	 * Loads Assets.
	 *
	 * @return void
	 */
	function load_assets_GForms_TMP() {
		
		// this will run when on the frontend
		add_action( 'wp_print_scripts', array (
				&$this,
				'load_scripts_GForms_TMP' 
		) );
	}
	
	/**
	 * Load Front End CSS/JS
	 *
	 * @return void
	 */
	function load_scripts_GForms_TMP() {
	}
	
	/**
	 * Check API Authorization
	 *
	 * @return boolean $is_authorized
	 */
	protected function is_api_authorized_GForms_TMP() {
		$oauth_provider = self::$oauth_gforms_tmp;
		return $oauth_provider->is_token_authorized();
	}
	
	/**
	 * Refresh API Token
	 *
	 * @return void
	 */
	protected function refresh_api_authorization_GForms_TMP() {
		$oauth_provider = self::$oauth_gforms_tmp;
		$accessToken = $oauth_provider->refresh_token();
		
		return $accessToken;
	}
	
	/**
	 * Check if Plugin is active (and authorized)
	 *
	 * @param boolean $check_auth
	 *        	Check Authorization as well
	 * @return boolean Returns whether plugin is active (and authorized)
	 */
	public function is_plugin_activated($check_auth = true) {
		$is_authorized = get_option( 'gforms_tmp_active', false );
		
		if ($check_auth && $is_authorized) {
			$is_authorized = $this->is_api_authorized_GForms_TMP();
		}
		
		return $is_authorized;
	}
	
	/**
	 * Get Token from OAuth Provider
	 *
	 * @return object
	 *
	 */
	public function get_api_token_GForms_TMP() {
		$oauth_provider = self::$oauth_gforms_tmp;
		return $oauth_provider->get_token();
	}
	
	/**
	 * Set First Run static variable to true
	 *
	 * @return void
	 */
	public static function set_first_run() {
		self::$first_run = true;
	}
	
	/**
	 * Get First Run static variable
	 *
	 * @return boolean
	 */
	protected function get_first_run() {
		$first_run = self::$first_run;
		return $first_run ?  : false;
	}
	
	/**
	 * Handle Auth Code Exchange
	 *
	 * @return void
	 */
	public function handle_code_exchange() {
		$result = array ();
		$result ['outcome'] = 0;
		$is_multisite = is_multisite();
		if (! check_ajax_referer( 'gforms_tmp_handle_wp_ajax', '_wpnonce' )) {
			$result ['outcome'] = 0;
			$result ['message'] = 'Sorry, this action is unverified.';
		} else {
			$id = sanitize_text_field( $_POST ['id'] );
			$url = self::$oauth_host . "/gapi/token/exchange";
			$origin = parse_url( get_site_url(), PHP_URL_HOST );
			$post = array (
					'id' => $id,
					'origin' => $origin 
			);
			$args = array (
					'body' => $post 
			);
			$response = wp_remote_post( $url, $args );
			if (! is_wp_error( $response )) {
				if (isset( $response ['response'] ) && $response ['response'] ['code'] == 200) {
					if (isset( $response ['body'] )) {
						$body = $response ['body'];
						$message = json_decode( $body, true );
						if (isset( $message ['outcome'] ) && $message ['outcome']) {
							$token = $message ['token'] ?  : false;
							if ($token) {
								$updated = $is_multisite ? update_site_option( 'gforms_tmp_access_token', $token ) : update_option( 'gforms_tmp_access_token', $token );
								if ($updated) {
									$result ['outcome'] = 1;
									$result ['message'] = 'You have successfully authorized Leads to push submissions to the Target Media Partners Dashboard.';
								} else {
									$result ['error'] = 'Sorry, Leads could not update the access token. Please try again.';
								}
							} else {
								$result ['error'] = 'Sorry, Leads could not successfully authorize your account. Please confirm that the account email is the same one as used to login to the Dashboard.';
							}
						} else {
							$result ['error'] = 'Sorry, Leads could not successfully authorize your account. Please confirm that the account email is the same one as used to login to the Dashboard.';
							if (isset( $message ['error'] ))
								$result ['debug'] = $message ['error'];
						}
					} else {
						$result ['error'] = 'Sorry, Leads could not interpret the Authorization response from the server.';
					}
				} else {
					$body = $response ['body'];
					$message = @json_decode( $body, true );
					$result ['error'] = 'Code: ' . $response ['response'] ['code'] . '. An unidentified error occurred.';
					if (isset( $message ['error'] ))
						$result ['debug'] = $message ['error'];
				}
			} else {
				$result ['error'] = 'An unidentified error occurred.';
				$result ['debug'] = $response->get_error_message();
			}
		}
		echo json_encode( $result );
		wp_die();
	}
	
	/**
	 * Handle Auth Code Exchange
	 *
	 * @return void
	 */
	public function handle_token_revocation() {
		$result = array ();
		$result ['outcome'] = 0;
		$is_multisite = is_multisite();
		if (! check_ajax_referer( 'gforms_tmp_handle_wp_ajax', '_wpnonce' )) {
			$result ['outcome'] = 0;
			$result ['message'] = 'Sorry, this action is unverified.';
		} else {
			$token = $is_multisite ? get_site_option( 'gforms_tmp_access_token' ) : get_option( 'gforms_tmp_access_token' );
			$url = self::$oauth_host . "/gapi/token/revoke";
			$post = array (
					'token' => $token 
			);
			$args = array (
					'body' => $post 
			);
			$response = wp_remote_post( $url, $args );
			if (! is_wp_error( $response )) {
				if (isset( $response ['response'] ) && $response ['response'] ['code'] == 200) {
					if (isset( $response ['body'] )) {
						$body = $response ['body'];
						$message = json_decode( $body, true );
						if (isset( $message ['outcome'] )) {
							$updated = $is_multisite ? delete_site_option( 'gforms_tmp_access_token' ) : delete_option( 'gforms_tmp_access_token' );
							if ($updated) {
								$result ['outcome'] = 1;
								$result ['message'] = 'Authorization to the Target Media Partners Dashboard has been revoked.';
							}
						} else {
							$result ['error'] = 'Sorry, Leads could not revoke authorization for your account. This may be caused by the Dashboard being temporarily inaccessible.';
							if (isset( $message ['error'] ))
								$result ['debug'] = $message ['error'];
						}
					} else {
						$result ['error'] = 'Sorry, Leads could not interpret the Authorization response from the server.';
					}
				} else {
					$body = $response ['body'];
					$message = @json_decode( $body, true );
					$result ['error'] = 'Code: ' . $response ['response'] ['code'] . '. An unidentified error occurred.';
					if (isset( $message ['error'] ))
						$result ['debug'] = $message ['error'];
				}
			} else {
				$result ['error'] = 'An unidentified error occurred.';
				$result ['debug'] = $response->get_error_message();
			}
		}
		echo json_encode( $result );
		wp_die();
	}
	public function get_oauth_provider() {
		return self::$oauth_gforms_tmp;
	}
	public function get_oauth_host() {
		return self::$oauth_host;
	}
}

// end class
?>
